routing notes
routes are file based in next.js
use folders for nested routes


**dynamic routing**
(in homepage folder)
create a file wrapped in [] for a dynamic route
use object destructuring to get the info from useRouter().query

**catch all routes**
(in docs folder)
A catch all route is used to have any number of nested routes at a base location. 

Get the params through useRouter().query (returns an array)

To have the base page as a default page for the catch all route, wrap the [...params] in another set of
brackets e.g. [[...params]]

** links **
To create a link (<a></a>), import Link from next/link. Use the Link tag with the href as a prop
Use for client-side routing only
Use useRouter().push(link) to get to a location programatically


**404 page**
To create a custom 404 page, simply create a 404.tsx file in the pages directory
------------------------------------------------------------------------------------------------------------
pre-rendering

**getStaticProps**
use this to fetch data that is needed for pre-rendering. USE ONLY IN PAGES, NOT COMPONENTS
stuff in here will not be client-side, only server-side. 

when a page using getStaticProps is pre-rendered at build time, next.js makes a 
HTML and JSON file of the fetched result

create a function: const getStaticProps = async () => {

}

this must return some object, with the key 'props,' also an object, e.g. 
return {
    props: {
        data
    }
}


in the main render function of the page, add props as an argument
example for typescript, the props will be as follows:

import { InferGetStaticPropsType } from 'next'
const examplePage = ({data}:InferGetStaticPropsType<typeof getStaticProps>) => {

}

OR (the better way)
you may need to create a new type for the data you are using. refer to *types.tsx* 

const examplePage = ({data}:{data: {somePropertyOfData:dataType}}) => {

}

**getStaticPaths**

if using a dynamic page with getStaticProps, use getStaticPaths

return the paths as an object: 

return {
    paths: {

    }
}

to get the paths dynamically (e.g. from an api) then: 

const res = await fetch(api)
const data = await res.json()

return {
    paths: data.map((results) => {
        return {
            params: {

            }
        }
    })
}

inside the params, set the property that is being used to navigate to this page, such as an id; 
get this from the results and make sure to set it as a string
