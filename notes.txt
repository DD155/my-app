routing notes
routes are file based in next.js
use folders for nested routes


**dynamic routing**
(in homepage folder)
create a file wrapped in [] for a dynamic route
use object destructuring to get the info from useRouter().query

**catch all routes**
(in docs folder)
A catch all route is used to have any number of nested routes at a base location. 

Get the params through useRouter().query (returns an array)

To have the base page as a default page for the catch all route, wrap the [...params] in another set of
brackets e.g. [[...params]]

** links **
To create a link (<a></a>), import Link from next/link. Use the Link tag with the href as a prop
Use for client-side routing only
Use useRouter().push(link) to get to a location programatically


**404 page**
To create a custom 404 page, simply create a 404.tsx file in the pages directory
------------------------------------------------------------------------------------------------------------
pre-rendering

**getStaticProps**
use this to fetch data that is needed for pre-rendering. USE ONLY IN PAGES, NOT COMPONENTS
stuff in here will not be client-side, only server-side. 

when a page using getStaticProps is pre-rendered at build time, next.js makes a 
HTML and JSON file of the fetched result

create a function: const getStaticProps = async () => {

}

this must return some object, with the key 'props,' also an object, e.g. 
return {
    props: {
        data
    }
}


in the main render function of the page, add props as an argument
example for typescript, the props will be as follows:

import { InferGetStaticPropsType } from 'next'
const examplePage = ({data}:InferGetStaticPropsType<typeof getStaticProps>) => {

}

OR (the better way)
you may need to create a new type for the data you are using. refer to *types.tsx* 

const examplePage = ({data}:{data: {somePropertyOfData:dataType}}) => {

}

**getStaticPaths**

if using a dynamic page with getStaticProps, use getStaticPaths

return the paths as an object: 

return {
    paths: {

    }
}

to get the paths dynamically (e.g. from an api) then: 

const res = await fetch(api)
const data = await res.json()

return {
    paths: data.map((results) => {
        return {
            params: {

            }
        }
    })
}

inside the params, set the property that is being used to navigate to this page, such as an id; 
get this from the results and make sure to set it as a string

also make sure to include fallback, e.g.

return {
        paths: data.map((results) => {
        return {
            params: {

            }
        }
        }),
        fallback: false
}

when fallback = false, any path not returned by getStaticPath will bring you to a 404 page. useful
for applications with not a lot of new paths being added or have a small number of paths to pre-render

when fallback = true, the new page will be statically generated and will not bring you to a 404 page.
instead it will go back to the fallback layout which is defined by:

const router:NextRouter = useRouter()
if (router.isFallback) {
    return (
        <>
            
        </>
    )
}

useful for when the app has a lot of static pages that depend on data

when fallback = 'blocking' this is similar to fallback = true, but there is no fallback page shown. 
if the content can be generated quickly, this could be better than showing another page in between. 
fallback = true is preferred, use blocking if it doesn't work

**Incremental Static Regeneration (ISR)**
Next.js lets you update statically generated pages to counter stale data without rebuilding the whole app
note that you will need to refresh the page twice to see the updated data as it will give the cached
page first while the regeneration is happening

to do this, in getStaticProps, add the following (where seconds is a number):
return {
        props: {
            posts: data.slice(0, 5)
        },
        revalidate: seconds
}

------------------------------------------------------------------------------------------------------------
Server Side rendering

